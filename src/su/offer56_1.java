package su;

/**
 * 数组中数字出现的次数
 *  题目要求时间O(N) 空间O(1) 则排除某些方法
 *  简化问题：一个整形数组nums里除一个数字之外，其它数字都出现了两次
 *  异或运算有个重要的性质，两个相同数字异或为 0，则将 nums中所有数字执行异或运算，留下的结果则为 出现一次的数字 x
 *  本题难点：数组nums中有两个只出现一次的数字 因此无法通过异或直接得到这两个数字
 *  设两个只出现一次的数字为x,y 由于x不等于y 则至少二进制有一位不同（即分别为0或1） 根据此位可以将nums拆分为分别包含x和y的两个子数组
 *  则两个子数组都满足 除一个数字之外，其它数字都出现了两次
 */
public class offer56_1 {
    /**
     *
     * @param nums
     * @return
     */
    public int[] singleNumbers(int[] nums) {
        int x = 0, y = 0, n = 0, m = 1;
        for(int num : nums)               // 1. 遍历异或
            n ^= num;
        //则n为那两个只出现1次的数的异或
        /**
         * 找出x和y不同进制的位
         * 对任意数a 有a&0001=1 则a的第一位为1
         * a&0010=1 则a的第二位为1
         * 则n就充当a 通过动态移动m 来找出n中为1的位 即x与y不同的进制位
         */
        while((n & m) == 0)               // 2. 循环左移，计算 m
            m <<= 1;
        for(int num: nums) {              // 3. 遍历 nums 分组
            if((num & m) != 0) x ^= num;  // 4. 当 num & m != 0
            else y ^= num;                // 4. 当 num & m == 0
        }
        return new int[] {x, y};          // 5. 返回出现一次的数字
    }
}
